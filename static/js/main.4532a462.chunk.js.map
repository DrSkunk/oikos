{"version":3,"sources":["util/firebase.js","util/modes.js","util/api.js","util/gameLogic.js","atoms/Tile.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","gameId","app","initializeApp","this","auth","db","database","ref","child","updateTile","id","tileIndex","newValue","a","firebase","update","parseAction","state","game","tile","mode","selectedTile","team","board","newState","cloneDeep","console","log","modes","player","level","Math","min","max","roof","Base","styled","div","props","selected","Level1","rect","Level2","Level3","polygon","Roof","circle","Player","playerColor","1","2","3","4","Tile","onClick","width","height","x","y","points","cx","cy","r","Component","Board","Game","onTileClick","index","setState","setMode","newMode","handleChange","event","parseInt","target","value","tiles","Object","values","map","i","key","onChange","disabled","Wrapper","startNewGame","refresh","shortId","newUrl","window","location","origin","pathname","history","pushState","replaceState","App","URL","searchParams","get","safeGameId","replace","loading","updateListener","on","data","val","set","catch","e","error","href","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"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","file":"static/js/main.4532a462.chunk.js","sourcesContent":["import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\n\n// Initalize and export Firebase.\nconst config = {\n  apiKey: 'AIzaSyA2Gllzx6Nrq32n3WdEBiWdTP0jG0a4swk',\n  authDomain: 'oikos-game.firebaseapp.com',\n  databaseURL: 'https://oikos-game.firebaseio.com',\n  projectId: 'oikos-game',\n  storageBucket: 'oikos-game.appspot.com',\n  messagingSenderId: '996454215912'\n};\nclass Firebase {\n  constructor(gameId) {\n    app.initializeApp(config);\n\n    this.auth = app.auth();\n    this.db = app.database();\n  }\n\n  set gameId(gameId){\n    this.ref = this.db.ref('games').child(gameId);\n  }\n}\nexport default new Firebase();\n","export default {\n  moveWorker: 'moveWorker',\n  addLevel: 'addLevel',\n  removeLevel: 'removeLevel',\n  addWorker: 'addWorker',\n  removeWorker: 'removeWorker',\n  addRoof: 'addRoof',\n  removeRoof: 'removeRoof'\n};\n","import firebase from './firebase';\n\nexport function createGame() {\n  const board = [\n    {\n      level: 0,\n      roof: false,\n      player: 0,\n    },\n    {\n      level: 0,\n      roof: false,\n      player: 0,\n    },\n    {\n      level: 0,\n      roof: false,\n      player: 0,\n    },\n    {\n      level: 0,\n      roof: false,\n      player: 0,\n    },\n    {\n      level: 0,\n      roof: false,\n      player: 0,\n    },\n    {\n      level: 0,\n      roof: false,\n      player: 0,\n    },\n    {\n      level: 0,\n      roof: false,\n      player: 0,\n    },\n    {\n      level: 0,\n      roof: false,\n      player: 0,\n    },\n    {\n      level: 0,\n      roof: false,\n      player: 0,\n    },\n    {\n      level: 0,\n      roof: false,\n      player: 0,\n    },\n    {\n      level: 0,\n      roof: false,\n      player: 0,\n    },\n    {\n      level: 0,\n      roof: false,\n      player: 0,\n    },\n    {\n      level: 0,\n      roof: false,\n      player: 0,\n    },\n    {\n      level: 0,\n      roof: false,\n      player: 0,\n    },\n    {\n      level: 0,\n      roof: false,\n      player: 0,\n    },\n    {\n      level: 0,\n      roof: false,\n      player: 0,\n    },\n    {\n      level: 0,\n      roof: false,\n      player: 0,\n    },\n    {\n      level: 0,\n      roof: false,\n      player: 0,\n    },\n    {\n      level: 0,\n      roof: false,\n      player: 0,\n    },\n    {\n      level: 0,\n      roof: false,\n      player: 0,\n    },\n    {\n      level: 0,\n      roof: false,\n      player: 0,\n    },\n    {\n      level: 0,\n      roof: false,\n      player: 0,\n    },\n    {\n      level: 0,\n      roof: false,\n      player: 0,\n    },\n    {\n      level: 0,\n      roof: false,\n      player: 0,\n    },\n    {\n      level: 0,\n      roof: false,\n      player: 0,\n    },\n  ];\n\n  firebase.ref\n    .set({\n      board,\n    })\n    .catch((e) => console.error(e));\n}\nexport async function updateTile(id, tileIndex, newValue) {\n  return firebase.ref.child('board').child(tileIndex).update(newValue);\n}\n","import cloneDeep from 'lodash.clonedeep';\nimport modes from './modes';\nimport { updateTile } from './api';\n\nexport function parseAction(gameId, state, tileIndex, game, tile) {\n  const { mode, selectedTile, team } = state;\n  const { board } = game;\n  const newState = cloneDeep(state);\n  console.log('newState', newState);\n  switch (mode) {\n    case modes.moveWorker:\n      if (selectedTile === null) {\n        return;\n      }\n      console.log('player', selectedTile, game, board[selectedTile]);\n      updateTile(gameId, tileIndex, {\n        player: board[selectedTile].player\n      });\n      updateTile(gameId, selectedTile, {\n        player: 0\n      });\n      break;\n    case modes.addLevel:\n      updateTile(gameId, tileIndex, {\n        level: Math.min(tile.level + 1, 3)\n      });\n      break;\n    case modes.removeLevel:\n      updateTile(gameId, tileIndex, {\n        level: Math.max(tile.level - 1, 0)\n      });\n      break;\n    case modes.addWorker:\n      updateTile(gameId, tileIndex, {\n        player: team\n      });\n      break;\n    case modes.removeWorker:\n      updateTile(gameId, tileIndex, {\n        player: 0\n      });\n      break;\n    case modes.addRoof:\n      updateTile(gameId, tileIndex, {\n        roof: true\n      });\n      break;\n    case modes.removeRoof:\n      updateTile(gameId, tileIndex, {\n        roof: false\n      });\n      break;\n    default:\n      break;\n  }\n}\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nconst Base = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  width: 100px;\n  height: 100px;\n  background-color: #ddd;\n  border: 1px solid transparent;\n  ${props => props.selected?\"outline: 5px solid yellow;\":\"\"}\n  \n  cursor: pointer;\n  &:hover {\n    border: 1px solid black;\n  }\n`;\n\nconst Level1 = styled.rect`\n  fill: red;\n`;\n\nconst Level2 = styled.rect`\n  fill: green;\n`;\n\nconst Level3 = styled.polygon`\n  fill: gray;\n  stroke: #000000;\n  stroke-width: 2.5px;\n`;\n\nconst Roof = styled.circle`\n  fill: blue;\n  stroke: #000000;\n  stroke-width: 2.5px;\n`;\n\nconst Player = styled.circle`\n  fill: ${props=>playerColor[props.player]};\n  stroke: #000000;\n  stroke-width: 2.5px;\n`;\n\nconst playerColor={\n  1: \"red\",\n  2: \"green\",\n  3: \"blue\",\n  4: \"purple\"\n}\n\nexport default class Tile extends Component {\n  render() {\n    const { level, roof, player, selected, onClick } = this.props;\n\n    return (\n      <Base onClick={onClick} selected={selected}>\n        <svg width=\"100\" height=\"100\">\n          {level >= 1?<Level1 width=\"100\" height=\"100\" />:null}\n          {level >= 2?<Level2 width=\"80\" height=\"80\" x=\"10\" y=\"10\" />:null}\n          {level >= 3?<Level3 points=\"20,62.4 20,37.55 37.534,20 62.4,20 80,37.55 80,62.4 62.4,80 37.55,80\" />:null}\n          {roof?<Roof cx=\"50\" cy=\"50\" r=\"25\"/>:null}\n          {player?<Player cx=\"50\" cy=\"50\" r=\"20\" player={player}/>:null}\n        </svg>\n      </Base>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { parseAction } from '../util/gameLogic';\nimport modes from '../util/modes';\nimport Tile from '../atoms/Tile';\n\nconst Board = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  height: 540px;\n`;\n\nexport default class Game extends Component {\n  constructor(props) {\n    super(props);\n    console.log('Game');\n    this.state = { mode: modes.moveWorker, selectedTile: null, team: 1 };\n  }\n\n  onTileClick = (index, tile) => {\n    console.log('Click', index, tile);\n\n    // parseAction(this.props.gameId, state, index, this.props.tiles, tile);\n\n    // Toggle selected tile\n    this.setState((state) => {\n      if (state.mode === modes.moveWorker) {\n        if (state.selectedTile === index) {\n          return { selectedTile: null };\n        } else if (state.selectedTile === null) {\n          return { selectedTile: index };\n        } else {\n          parseAction(this.props.gameId, state, index, this.props.game, tile);\n          return { selectedTile: null };\n        }\n      } else {\n        parseAction(this.props.gameId, state, index, this.props.game, tile);\n      }\n    });\n  };\n\n  setMode = (newMode) => {\n    console.log('newMode', newMode);\n    if (newMode !== modes.moveWorker) {\n      this.setState({ mode: newMode, selectedTile: null });\n    } else {\n      this.setState({ mode: newMode });\n    }\n  };\n\n  handleChange = (event) => {\n    const team = parseInt(event.target.value);\n    this.setState({ team });\n  };\n\n  render() {\n    const { game } = this.props;\n    const { mode, team, selectedTile } = this.state;\n    const tiles = Object.values(game.board).map((tile, i) => (\n      <Tile\n        key={'tile' + i}\n        level={tile.level}\n        roof={tile.roof}\n        player={tile.player}\n        onClick={() => {\n          this.onTileClick(i, tile);\n        }}\n        selected={i === selectedTile}\n      />\n    ));\n    return (\n      <div>\n        <label>\n          Team\n          <select value={team} onChange={this.handleChange}>\n            <option value=\"1\">Red</option>\n            <option value=\"2\">Green</option>\n            <option value=\"3\">Blue</option>\n            <option value=\"4\">Purple</option>\n          </select>\n        </label>\n\n        <button\n          onClick={() => this.setMode(modes.moveWorker)}\n          disabled={mode === modes.moveWorker}\n        >\n          Move worker\n        </button>\n        <button\n          onClick={() => this.setMode(modes.addLevel)}\n          disabled={mode === modes.addLevel}\n        >\n          Add level\n        </button>\n        <button\n          onClick={() => this.setMode(modes.removeLevel)}\n          disabled={mode === modes.removeLevel}\n        >\n          remove level\n        </button>\n        <button\n          onClick={() => this.setMode(modes.addWorker)}\n          disabled={mode === modes.addWorker}\n        >\n          Add Worker\n        </button>\n        <button\n          onClick={() => this.setMode(modes.removeWorker)}\n          disabled={mode === modes.removeWorker}\n        >\n          Remove worker\n        </button>\n        <button\n          onClick={() => this.setMode(modes.addRoof)}\n          disabled={mode === modes.addRoof}\n        >\n          Add roof\n        </button>\n        <button\n          onClick={() => this.setMode(modes.removeRoof)}\n          disabled={mode === modes.removeRoof}\n        >\n          Remove roof\n        </button>\n        <Board>{tiles}</Board>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport shortId from 'shortid';\nimport styled from 'styled-components';\nimport firebase from './util/firebase';\nimport Game from './components/Game';\nimport { createGame } from './util/api';\n\nconst Wrapper = styled.div`\n  width: 540px;\n  margin: 0 auto;\n`;\n\nfunction startNewGame(refresh = false, gameId = null) {\n  if (!gameId) {\n    gameId = shortId();\n  }\n  const newUrl =\n    window.location.origin + window.location.pathname + '?gameId=' + gameId;\n  if (refresh) {\n    window.history.pushState(null, null, newUrl);\n  } else {\n    window.history.replaceState(null, null, newUrl);\n  }\n}\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    let gameId = new URL(window.location).searchParams.get('gameId');\n    if (gameId === null) {\n      gameId = shortId();\n      startNewGame(false, gameId);\n    }\n    const safeGameId = gameId.replace(/[^\\w\\s]/gi, '');\n    if (gameId !== safeGameId) {\n      startNewGame(false, safeGameId);\n    }\n    firebase.gameId = gameId;\n\n    this.state = { loading: true, gameId };\n  }\n\n  componentDidMount() {\n    this.updateListener = firebase.ref.on('value', (data) => {\n      const game = data.val();\n      if (game === null) {\n        createGame(this.state.gameId).catch((error) => {\n          this.setState({ error: true });\n        });\n      } else {\n        this.setState({\n          game,\n          loading: false,\n        });\n      }\n    });\n  }\n\n  render() {\n    const { loading, error, game, gameId } = this.state;\n    if (error) {\n      return (\n        <div>\n          An error occured, please refresh page to try again. If this persists,\n          contact <a href=\"https://sebastiaanjansen.be/contact\">Sebastiaan</a>.\n        </div>\n      );\n    }\n    if (loading) {\n      return <div>Loading....</div>;\n    }\n    return (\n      <Wrapper>\n        <Game game={game} gameId={gameId} />\n        <button\n          onClick={() => {\n            startNewGame(true);\n          }}\n        >\n          Start nieuw spel\n        </button>\n      </Wrapper>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}